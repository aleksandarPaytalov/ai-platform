---
alwaysApply: false
---
# Task 4.5: Create Base UI Components

## Context and Scope
You are working on **Task 4.5** of the AI Feature Tracker project. This task focuses ONLY on creating foundational UI components that form the design system base. Do NOT implement any business logic, data fetching, or application-specific features beyond what is explicitly listed in the AI Instructions below.

## Technology Standards for This Task
- **React components** with TypeScript and proper interfaces
- **Tailwind CSS** with consistent design system utilities
- **Accessibility** with WCAG 2.1 AA compliance and proper ARIA attributes
- **Component variants** with size, color, and state options
- **Keyboard navigation** and focus management
- **Design tokens** for consistent theming and spacing

## AI Instructions

Complete the following tasks in exact order:

### 1. Create Button Components (`src/components/ui/button/`)
- Create `Button.tsx` component with primary, secondary, ghost, and outline variants
- Create `IconButton.tsx` component for icon-only buttons with proper accessibility
- Create `ButtonGroup.tsx` component for grouped button layouts
- Create `LoadingButton.tsx` component with loading states and spinner integration
- Add proper TypeScript interfaces for all button props and variants
- Include size variants (xs, sm, md, lg, xl) with consistent scaling
- Add state variants (default, hover, active, disabled, loading)
- Implement proper focus management and keyboard navigation
- Include ARIA attributes and screen reader support
- Add click handlers with proper event typing and preventDefault handling

### 2. Create Input Components (`src/components/ui/input/`)
- Create `Input.tsx` component for text inputs with label and validation support
- Create `Textarea.tsx` component for multi-line text input
- Create `Select.tsx` component for dropdown selections with search capabilities
- Create `Checkbox.tsx` component with indeterminate state support
- Create `Radio.tsx` component with group management
- Create `Toggle.tsx` component for boolean switches
- Add proper TypeScript interfaces for all input types and validation
- Include input states (default, focus, error, disabled, readonly)
- Implement proper form validation integration and error display
- Add accessibility labels, descriptions, and error announcements
- Include keyboard navigation and focus management for all inputs

### 3. Create Card Components (`src/components/ui/card/`)
- Create `Card.tsx` component with header, body, and footer sections
- Create `CardHeader.tsx` component with title, subtitle, and action areas
- Create `CardContent.tsx` component for main card content with proper spacing
- Create `CardFooter.tsx` component for actions and metadata
- Create `CardImage.tsx` component for card image sections with aspect ratio control
- Add proper TypeScript interfaces for card composition and styling
- Include card variants (elevated, flat, outlined, filled)
- Add interactive states (default, hover, pressed) for clickable cards
- Implement proper semantic structure and accessibility
- Include responsive behavior and mobile optimization

### 4. Create Badge and Tag Components (`src/components/ui/badge/`)
- Create `Badge.tsx` component for status indicators and counts
- Create `Tag.tsx` component for categorization and filtering
- Create `StatusBadge.tsx` component for status indicators (success, warning, error, info)
- Create `CountBadge.tsx` component for numerical indicators
- Create `TagGroup.tsx` component for managing multiple tags
- Add proper TypeScript interfaces for badge types and styling
- Include color variants matching semantic meaning (success, warning, error, info)
- Add size variants (xs, sm, md, lg) with appropriate scaling
- Implement proper contrast ratios for accessibility
- Include interactive states for removable and clickable badges

### 5. Create Modal and Dialog Components (`src/components/ui/modal/`)
- Create `Modal.tsx` component for overlay dialogs with backdrop
- Create `ModalHeader.tsx` component with title and close button
- Create `ModalContent.tsx` component for scrollable modal body
- Create `ModalFooter.tsx` component for action buttons
- Create `Dialog.tsx` component for confirmation and alert dialogs
- Create `Drawer.tsx` component for slide-out panels
- Add proper TypeScript interfaces for modal props and event handlers
- Implement focus trapping and keyboard navigation (Escape to close, Tab navigation)
- Add proper ARIA attributes (role="dialog", aria-labelledby, aria-describedby)
- Include backdrop click handling and modal dismissal options
- Implement smooth animations for modal open/close transitions

### 6. Create Navigation Components (`src/components/ui/navigation/`)
- Create `Tabs.tsx` component with tab panels and keyboard navigation
- Create `TabList.tsx` component for tab header management
- Create `TabPanel.tsx` component for tab content areas
- Create `Breadcrumb.tsx` component for navigation hierarchy
- Create `Pagination.tsx` component for page navigation
- Create `Link.tsx` component extending Next.js Link with consistent styling
- Add proper TypeScript interfaces for navigation components
- Implement proper ARIA attributes for navigation landmarks
- Include keyboard navigation (arrow keys for tabs, Enter/Space for activation)
- Add active state management and visual indicators
- Include responsive behavior for navigation components

### 7. Create Utility Components (`src/components/ui/utility/`)
- Create `Avatar.tsx` component for user/tool profile images with fallbacks
- Create `Icon.tsx` component for consistent icon usage with size variants
- Create `Divider.tsx` component for visual separation with orientation options
- Create `Tooltip.tsx` component for contextual information with positioning
- Create `Popover.tsx` component for floating content with positioning logic
- Create `VisuallyHidden.tsx` component for screen reader only content
- Add proper TypeScript interfaces for all utility components
- Implement proper positioning logic for floating elements (Tooltip, Popover)
- Include accessibility features and keyboard navigation support
- Add responsive behavior and mobile touch considerations

### 8. Create Design System Configuration (`src/lib/design-system.ts`)
- Define color palette constants with semantic naming
- Create typography scale with consistent font sizes and line heights
- Add spacing scale matching Tailwind CSS defaults
- Define component size scales for consistent sizing across components
- Create animation and transition constants
- Add breakpoint definitions and responsive utilities
- Include accessibility constants (contrast ratios, focus styles)
- Create theme configuration and customization options
- Add design token validation and type safety
- Include component variant definitions and mapping

## Completion Checklist

Before marking this task as complete, verify ALL of the following items:

### Button Components Verification
- [X] `src/components/ui/button/Button.tsx` exists with all variants (primary, secondary, ghost, outline)
- [X] `src/components/ui/button/IconButton.tsx` exists with proper accessibility
- [X] `src/components/ui/button/ButtonGroup.tsx` exists for grouped layouts
- [X] `src/components/ui/button/LoadingButton.tsx` exists with loading states
- [X] All button components have proper TypeScript interfaces
- [X] Size variants (xs, sm, md, lg, xl) work correctly with consistent scaling
- [X] State variants (default, hover, active, disabled, loading) function properly
- [X] Focus management and keyboard navigation work correctly
- [X] ARIA attributes and screen reader support implemented
- [X] Click handlers with proper event typing work correctly

### Input Components Verification
- [X] `src/components/ui/input/Input.tsx` exists with label and validation support
- [X] `src/components/ui/input/Textarea.tsx` exists for multi-line input
- [X] `src/components/ui/input/Select.tsx` exists with dropdown and search capabilities
- [X] `src/components/ui/input/Checkbox.tsx` exists with indeterminate state
- [X] `src/components/ui/input/Radio.tsx` exists with group management
- [X] `src/components/ui/input/Toggle.tsx` exists for boolean switches
- [X] All input components have proper TypeScript interfaces
- [X] Input states (default, focus, error, disabled, readonly) work correctly
- [X] Form validation integration and error display function properly
- [X] Accessibility labels, descriptions, and error announcements work
- [X] Keyboard navigation and focus management work for all inputs

### Card Components Verification
- [X] `src/components/ui/card/Card.tsx` exists with header, body, footer sections
- [X] `src/components/ui/card/CardHeader.tsx` exists with title, subtitle, actions
- [X] `src/components/ui/card/CardContent.tsx` exists with proper spacing
- [X] `src/components/ui/card/CardFooter.tsx` exists for actions and metadata
- [X] `src/components/ui/card/CardImage.tsx` exists with aspect ratio control
- [X] All card components have proper TypeScript interfaces
- [X] Card variants (elevated, flat, outlined, filled) work correctly
- [X] Interactive states (default, hover, pressed) function for clickable cards
- [X] Proper semantic structure and accessibility implemented
- [X] Responsive behavior and mobile optimization work correctly

### Badge and Tag Components Verification
- [X] `src/components/ui/badge/Badge.tsx` exists for status indicators
- [X] `src/components/ui/badge/Tag.tsx` exists for categorization
- [X] `src/components/ui/badge/StatusBadge.tsx` exists with semantic colors
- [X] `src/components/ui/badge/CountBadge.tsx` exists for numerical indicators
- [X] `src/components/ui/badge/TagGroup.tsx` exists for multiple tag management
- [X] All badge components have proper TypeScript interfaces
- [X] Color variants matching semantic meaning work correctly
- [X] Size variants (xs, sm, md, lg) scale appropriately
- [X] Proper contrast ratios for accessibility maintained
- [X] Interactive states for removable and clickable badges work

### Modal and Dialog Components Verification
- [X] `src/components/ui/modal/Modal.tsx` exists with backdrop functionality
- [X] `src/components/ui/modal/ModalHeader.tsx` exists with title and close button
- [X] `src/components/ui/modal/ModalContent.tsx` exists with scrollable body
- [X] `src/components/ui/modal/ModalFooter.tsx` exists for action buttons
- [X] `src/components/ui/modal/Dialog.tsx` exists for confirmations and alerts
- [X] `src/components/ui/modal/Drawer.tsx` exists for slide-out panels
- [X] All modal components have proper TypeScript interfaces
- [X] Focus trapping and keyboard navigation work correctly
- [X] Proper ARIA attributes implemented (role, aria-labelledby, aria-describedby)
- [X] Backdrop click handling and dismissal options function properly
- [X] Smooth animations for open/close transitions work correctly

### Navigation Components Verification
- [X] `src/components/ui/navigation/Tabs.tsx` exists with keyboard navigation
- [X] `src/components/ui/navigation/TabList.tsx` exists for tab header management
- [X] `src/components/ui/navigation/TabPanel.tsx` exists for content areas
- [X] `src/components/ui/navigation/Breadcrumb.tsx` exists for hierarchy navigation
- [X] `src/components/ui/navigation/Pagination.tsx` exists for page navigation
- [X] `src/components/ui/navigation/Link.tsx` exists extending Next.js Link
- [X] All navigation components have proper TypeScript interfaces
- [X] Proper ARIA attributes for navigation landmarks implemented
- [X] Keyboard navigation (arrow keys, Enter/Space) works correctly
- [X] Active state management and visual indicators function properly
- [X] Responsive behavior for navigation components works correctly

### Utility Components Verification
- [X] `src/components/ui/utility/Avatar.tsx` exists with image fallbacks
- [X] `src/components/ui/utility/Icon.tsx` exists with size variants
- [X] `src/components/ui/utility/Divider.tsx` exists with orientation options
- [X] `src/components/ui/utility/Tooltip.tsx` exists with positioning logic
- [X] `src/components/ui/utility/Popover.tsx` exists with floating content
- [X] `src/components/ui/utility/VisuallyHidden.tsx` exists for screen readers
- [X] All utility components have proper TypeScript interfaces
- [X] Positioning logic for floating elements works correctly
- [X] Accessibility features and keyboard navigation implemented
- [X] Responsive behavior and mobile touch considerations included

### Design System Configuration Verification
- [X] `src/lib/design-system.ts` exists with color palette constants
- [X] Typography scale with consistent font sizes and line heights defined
- [X] Spacing scale matching Tailwind CSS defaults implemented
- [X] Component size scales for consistent sizing defined
- [X] Animation and transition constants created
- [X] Breakpoint definitions and responsive utilities included
- [X] Accessibility constants (contrast ratios, focus styles) defined
- [X] Theme configuration and customization options created
- [X] Design token validation and type safety implemented
- [X] Component variant definitions and mapping included

### Accessibility Verification
 - [X] All components meet WCAG 2.1 AA accessibility standards
 - [X] Proper ARIA attributes implemented throughout
 - [X] Keyboard navigation works for all interactive components
 - [X] Focus management and visual focus indicators work correctly
 - [X] Screen reader compatibility verified for all components
 - [X] Color contrast ratios meet accessibility requirements
 - [X] Components work properly with assistive technologies
 - [X] Error states are properly announced to screen readers

### TypeScript and Styling Verification
- [X] All components have comprehensive TypeScript interfaces
- [X] No TypeScript errors or warnings exist
- [X] Strict mode compliance maintained throughout
- [X] Consistent Tailwind CSS usage across all components
- [X] Design system tokens used consistently
- [X] Proper prop validation and default values implemented
- [X] Components are composable and reusable
- [X] Responsive design works at all breakpoints

### Integration and Testing Verification
- [X] All components render without errors
- [X] Component variants and states work correctly
- [X] Interactive components respond properly to user input
- [X] Animation and transition effects work smoothly
- [X] Components integrate well with existing layout system
- [X] No console errors or warnings during component usage
- [X] Components work properly across different browsers
- [X] Mobile touch interactions work correctly for applicable components

## Success Criteria
Task 4.5 is complete when:
1. All items in the completion checklist are verified ✓
2. Comprehensive UI component library is functional and accessible
3. All components follow consistent design system patterns
4. TypeScript interfaces are complete and type-safe
5. Accessibility standards are met across all components
6. Components are responsive and work on all device sizes
7. No errors exist in console or TypeScript compilation
8. Component library is ready for use in subsequent development tasks

## Important Notes
- **ONLY** work on foundational UI components - do not implement business logic or application features
- Focus on creating reusable, accessible, and well-typed components
- Ensure all components follow the established design system
- Test components with keyboard navigation and screen readers
- Maintain consistent styling patterns using Tailwind CSS
- Create comprehensive examples and documentation for each component
- Ensure all interactive components have proper focus management
- Test responsive behavior across all breakpoints