---
alwaysApply: false
---
# Task 1.5: Create Step-Specific Rules (Steps 2-15)

## Context
This task creates 70+ individual task rule files across 14 numbered step folders (02-15). Each rule file must have focused context limited to its specific task domain, reference the global standards, include dependencies from previous tasks, and provide clear completion criteria. This granular approach ensures maximum AI control and prevents scope creep.

## AI Instructions

### 1. Create Empty Task Rule Files for Step 2: Infrastructure (02-infrastructure/)
Create the following empty task rule files in `.cursor/rules/steps/02-infrastructure/` with basic template structure:

#### task-2.1-initialize-nextjs-project.mdc
```markdown
---
description: "Initialize Next.js 14 project with TypeScript and essential dependencies"
type: "Manual"
---

# Task 2.1: Initialize Next.js 14 Project

## Context
[To be filled when task is implemented]

## Dependencies
[To be filled when task is implemented]

## AI Instructions
[To be filled when task is implemented]

## Standards References
[To be filled when task is implemented]

## Expected Output
[To be filled when task is implemented]

## Testing Requirements
[To be filled when task is implemented]

## Completion Checklist
[To be filled when task is implemented]
```

#### task-2.2-configure-development-environment.mdc
```markdown
---
description: "Set up ESLint, Prettier, Husky, and development tooling"
type: "Manual"
---

# Task 2.2: Configure Development Environment

## Context
[To be filled when task is implemented]

[Continue with same empty template structure...]
```

[Apply same empty template pattern for tasks 2.3, 2.4, and 2.5]

### 2. Create Empty Task Rule Files for Step 3: Supabase Project Setup (03-supabase-project-setup/)
Create the following empty task rule files in `.cursor/rules/steps/03-supabase-project-setup/` with basic template structure:

#### task-3.1-create-supabase-project.mdc
```markdown
---
description: "Create Supabase project and configure connection"
type: "Manual"
---

# Task 3.1: Create Supabase Project

## Context
[To be filled when task is implemented]

## Dependencies
[To be filled when task is implemented]

## AI Instructions
[To be filled when task is implemented]

## Standards References
[To be filled when task is implemented]

## Expected Output
[To be filled when task is implemented]

## Testing Requirements
[To be filled when task is implemented]

## Completion Checklist
[To be filled when task is implemented]
```

[Apply same empty template pattern for tasks 3.2, 3.3, 3.4, and 3.5]

### 3. Create Empty Placeholder Template for Remaining Steps (04-15)
For each remaining step (04-app-structure through 15-production-deployment), create empty task rule files following this placeholder template:

#### File Naming Convention
- Use format: `task-[step].[task]-[descriptive-name].mdc`
- Example: `task-4.1-create-application-layout.mdc`
- Place in appropriate numbered folder: `04-app-structure/`

#### Standard Empty Template Structure for Each Task
```markdown
---
description: "[Brief description of task purpose from development plan]"
type: "Manual"
---

# Task [X].[Y]: [Task Title from Development Plan]

## Context
[To be filled when task is implemented]

## Dependencies
[To be filled when task is implemented]

## AI Instructions
[To be filled when task is implemented]

## Standards References
[To be filled when task is implemented]

## Expected Output
[To be filled when task is implemented]

## Testing Requirements
[To be filled when task is implemented]

## Completion Checklist
[To be filled when task is implemented]
```

### 4. Create All Empty Task Rule Files for Steps 4-15
Apply the empty placeholder template to create task rule files for:

#### Step 04: App Structure (04-app-structure/)
- task-4.1-create-application-layout.mdc (empty placeholder)
- task-4.2-setup-routing-structure.mdc (empty placeholder)
- task-4.3-create-loading-error-components.mdc (empty placeholder)
- task-4.4-implement-responsive-grid.mdc (empty placeholder)
- task-4.5-create-base-ui-components.mdc (empty placeholder)

#### Step 05: Tool Data Display (05-tool-data-display/)  
- task-5.1-create-supabase-data-fetching.mdc (empty placeholder)
- task-5.2-create-tool-card-component.mdc (empty placeholder)
- task-5.3-create-tool-grid-component.mdc (empty placeholder)
- task-5.4-create-tool-detail-component.mdc (empty placeholder)
- task-5.5-create-supporting-display-components.mdc (empty placeholder)

[Continue same pattern for Steps 06-15 with empty placeholder files only]

### 5. Ensure Consistency Across All Empty Task Rule Files
For each empty task rule file, ensure:
- **Proper Frontmatter**: MDC frontmatter with description and type: "Manual"
- **Basic Structure**: Standard template sections with placeholder text
- **Correct Naming**: Follows task-[X].[Y]-[descriptive-name].mdc format
- **Proper Placement**: Files in correct numbered step folders
- **Empty Content**: All sections contain "[To be filled when task is implemented]" placeholders
- **Ready for Content**: Files ready to receive detailed content when tasks are implemented

## Expected Output
Complete set of 70+ empty placeholder task rule files across 14 numbered step folders (02-15), each with:
- Proper MDC frontmatter with description and type: "Manual"
- Basic template structure with placeholder sections
- Correct file naming convention and folder organization
- Ready to receive detailed content when tasks are implemented
- Consistent empty template structure for future development

## Completion Checklist

**Before marking this task as complete, verify ALL of the following:**

### Step 2: Infrastructure Rules (02-infrastructure/) ✓
- [ ] 5 empty task rule files created with proper naming convention
- [ ] Each file has proper MDC frontmatter with description and type: "Manual"
- [ ] All files contain basic template structure with placeholder sections
- [ ] Files are ready to receive detailed content when implemented
- [ ] All files follow the established empty template pattern

### Step 3: Supabase Rules (03-supabase-project-setup/) ✓
- [ ] 5 empty task rule files created with proper naming convention
- [ ] Each file has proper MDC frontmatter with description and type: "Manual"
- [ ] All files contain basic template structure with placeholder sections
- [ ] Files are ready to receive detailed content when implemented
- [ ] All files follow the established empty template pattern

### Step 4: App Structure Rules (04-app-structure/) ✓
- [ ] 5 empty task rule files created with proper naming convention
- [ ] Each file has proper MDC frontmatter with basic task description
- [ ] All files contain placeholder sections marked "[To be filled when task is implemented]"
- [ ] Files are properly placed in 04-app-structure/ folder
- [ ] All files ready for future content addition

### Step 5: Tool Data Display Rules (05-tool-data-display/) ✓
- [ ] 5 empty task rule files created with proper naming convention
- [ ] Each file has proper MDC frontmatter with basic task description
- [ ] All files contain placeholder sections marked "[To be filled when task is implemented]"
- [ ] Files are properly placed in 05-tool-data-display/ folder
- [ ] All files ready for future content addition

### Step 6: Navigation System Rules (06-navigation-system/) ✓
- [ ] 5 empty task rule files created with proper naming convention
- [ ] Each file has proper MDC frontmatter with basic task description
- [ ] All files contain placeholder sections marked "[To be filled when task is implemented]"
- [ ] Files are properly placed in 06-navigation-system/ folder
- [ ] All files ready for future content addition

### Step 7: Realtime Integration Rules (07-realtime-integration/) ✓
- [ ] 5 empty task rule files created with proper naming convention
- [ ] Each file has proper MDC frontmatter with basic task description
- [ ] All files contain placeholder sections marked "[To be filled when task is implemented]"
- [ ] Files are properly placed in 07-realtime-integration/ folder
- [ ] All files ready for future content addition

### Step 8: Feature Updates Display Rules (08-feature-updates-display/) ✓
- [ ] 5 empty task rule files created with proper naming convention
- [ ] Each file has proper MDC frontmatter with basic task description
- [ ] All files contain placeholder sections marked "[To be filled when task is implemented]"
- [ ] Files are properly placed in 08-feature-updates-display/ folder
- [ ] All files ready for future content addition

### Step 9: AI Integration Rules (09-ai-integration/) ✓
- [ ] 5 empty task rule files created with proper naming convention
- [ ] Each file has proper MDC frontmatter with basic task description
- [ ] All files contain placeholder sections marked "[To be filled when task is implemented]"
- [ ] Files are properly placed in 09-ai-integration/ folder
- [ ] All files ready for future content addition

### Step 10: Automated Update Rules (10-automated-update-system/) ✓
- [ ] 5 empty task rule files created with proper naming convention
- [ ] Each file has proper MDC frontmatter with basic task description
- [ ] All files contain placeholder sections marked "[To be filled when task is implemented]"
- [ ] Files are properly placed in 10-automated-update-system/ folder
- [ ] All files ready for future content addition

### Step 11: Search & Filtering Rules (11-search-filtering/) ✓
- [ ] 5 empty task rule files created with proper naming convention
- [ ] Each file has proper MDC frontmatter with basic task description
- [ ] All files contain placeholder sections marked "[To be filled when task is implemented]"
- [ ] Files are properly placed in 11-search-filtering/ folder
- [ ] All files ready for future content addition

### Step 12: Mobile Optimization Rules (12-mobile-optimization/) ✓
- [ ] 5 empty task rule files created with proper naming convention
- [ ] Each file has proper MDC frontmatter with basic task description
- [ ] All files contain placeholder sections marked "[To be filled when task is implemented]"
- [ ] Files are properly placed in 12-mobile-optimization/ folder
- [ ] All files ready for future content addition

### Step 13: Performance & SEO Rules (13-performance-seo/) ✓
- [ ] 5 empty task rule files created with proper naming convention
- [ ] Each file has proper MDC frontmatter with basic task description
- [ ] All files contain placeholder sections marked "[To be filled when task is implemented]"
- [ ] Files are properly placed in 13-performance-seo/ folder
- [ ] All files ready for future content addition

### Step 14: Testing & QA Rules (14-testing-quality-assurance/) ✓
- [ ] 5 empty task rule files created with proper naming convention
- [ ] Each file has proper MDC frontmatter with basic task description
- [ ] All files contain placeholder sections marked "[To be filled when task is implemented]"
- [ ] Files are properly placed in 14-testing-quality-assurance/ folder
- [ ] All files ready for future content addition

### Step 15: Production Deployment Rules (15-production-deployment/) ✓
- [ ] 5 empty task rule files created with proper naming convention
- [ ] Each file has proper MDC frontmatter with basic task description
- [ ] All files contain placeholder sections marked "[To be filled when task is implemented]"
- [ ] Files are properly placed in 15-production-deployment/ folder
- [ ] All files ready for future content addition

### Quality and Consistency Verification ✓
- [ ] All 70+ empty task rule files follow consistent placeholder template structure
- [ ] Each file has proper MDC frontmatter with description and type: "Manual"
- [ ] All files include basic template sections with "[To be filled when task is implemented]" placeholders
- [ ] File naming convention follows task-[X].[Y]-[descriptive-name].mdc format correctly
- [ ] All placeholder sections are properly formatted and consistent
- [ ] Files are ready to receive detailed content when tasks are implemented
- [ ] No file contains detailed content (all are empty placeholders as intended)

### File Organization Verification ✓
- [ ] All task rule files are in correct numbered step folders (02-15)
- [ ] File naming convention follows task-[X].[Y]-[descriptive-name].mdc format
- [ ] Folder structure is clean and properly organized
- [ ] All files are accessible and properly formatted
- [ ] No duplicate or missing task rule files

### Final Verification ✓
- [ ] Complete set of 70+ empty placeholder task rule files ready for future content
- [ ] Each placeholder file provides basic structure for focused task development
- [ ] File organization supports controlled, step-by-step development execution
- [ ] All placeholders integrate with established global standards framework
- [ ] Empty template system is ready for granular task rule content creation
- [ ] Ready to proceed to Task 1.6: Create Master Project Checklist Rule

**IMPORTANT**: Do not proceed to any other tasks or make assumptions about next steps. This task is complete only when ALL checklist items are verified and the complete set of 70+ empty placeholder task rule files are created across all 14 numbered step folders with proper file naming, basic template structure, and placeholder sections ready for future detailed content.